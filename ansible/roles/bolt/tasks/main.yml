---
- name: ensure the `{{ bolt_postgres_user }}` postgres user exists
  become: yes
  become_user: postgres
  postgresql_user:
    name: bolt
    password: "{{ bolt_postgres_password }}"
    state: present
  tags:
    - bolt
    - postgres

- name: ensure the `{{ bolt_postgres_database }}` postgres database exists
  become: yes
  become_user: postgres
  postgresql_db:
    name: bolt
    owner: "{{ bolt_postgres_user }}"
    state: present
  tags:
    - bolt
    - postgres

- name: ensure the checkout is up-to-date
  become: yes
  git:
    dest: "{{ bolt_checkout_directory }}"
    repo: "{{ bolt_repository_url }}"
    version: "{{ bolt_version }}"
    umask: '0077'
  register: bolt_checkout
  tags:
    - bolt
    - git
  notify:
    - restart bolt

- name: ensure the bolt user is up-to-date
  become: yes
  user:
    name: "{{ bolt_service_user }}"
    home: "{{ bolt_home_directory }}"
    system: yes
    state: present
  tags:
    - bolt
  notify:
    - restart bolt

- name: ensure the assembler docker image is up-to-date
  become: yes
  docker_image:
    path: "{{ bolt_checkout_directory }}"
    dockerfile: "{{ bolt_checkout_directory }}/docker/assembler/Dockerfile"
    name: jchristhub/bolt-assembler:{{ bolt_version }}
    state: present
  tags:
    - bolt
    - docker
    - release

- name: assemble a release with distillery
  become: yes
  docker_container:
    cleanup: yes
    command: /build/docker/assembler/build.sh
    detach: no
    image: jchristhub/bolt-assembler:{{ bolt_version }}
    keep_volumes: no
    memory: 500M
    name: bolt-assembler-{{ bolt_version }}
    network_mode: host
    working_dir: "{{ bolt_checkout_directory }}"
    env:
      PROD_COOKIE: "{{ bolt_cookie }}"
    volumes:
      - "{{ bolt_checkout_directory }}:/build"
  tags:
    - bolt
    - docker
    - release

- name: ensure the release directory exists
  become: yes
  file:
    path: /opt/bolt/bolt-{{ bolt_release_version }}-{{ bolt_checkout.after[:5] }}
    state: directory
    owner: "{{ bolt_service_user }}"
    group: root
    mode: '0700'
  tags:
    - bolt
    - release

- name: unpack the archive into bolt's home directory
  become: yes
  unarchive:
    copy: no
    src: "{{ bolt_checkout_directory }}/rel/artifacts/bolt-{{ bolt_release_version }}.tar.gz"
    dest: /opt/bolt/bolt-{{ bolt_release_version }}-{{ bolt_checkout.after[:5] }}
    owner: "{{ bolt_service_user }}"
    group: root
    mode: '0700'
  tags:
    - bolt
    - release
  notify:
    - restart bolt

- name: ensure the configuration directory is present
  become: yes
  file:
    path: /etc/opt/bolt
    owner: root #"{{ bolt_service_user }}"
    group: root
    state: directory
    mode: '0500'
  tags:
    - bolt
    - configuration

- name: ensure the environment file is up-to-date
  become: yes
  template:
    src: bolt.env.j2
    dest: /etc/opt/bolt/bolt.env
    owner: root
    group: root
    mode: '0400'
  tags:
    - bolt
    - configuration
  notify:
    - restart bolt

- name: ensure the systemd service is up-to-date
  become: yes
  template:
    src: bolt.service.j2
    dest: /etc/systemd/system/bolt.service
    owner: root
    group: root
    mode: '0444'
  tags:
    - bolt
  notify:
    - reload the systemd daemon
    - restart bolt

# vim: sw=2 ts=2:
